---
name: go

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Extract Go version
        id: version
        run: echo GO_VERSION=$(awk '$1 == "go" {print $2}' go.mod) >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.version.outputs.GO_VERSION }}

      - name: Build
        run: go build -v ./...

  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Extract Go version
        id: version
        run: echo GO_VERSION=$(awk '$1 == "go" {print $2}' go.mod) >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.version.outputs.GO_VERSION }}

      - name: Install gocov and gocov-xml
        run: |
          echo $HOME
          echo $GOPATH
          cd /
          go install github.com/axw/gocov/gocov@latest
          go install github.com/AlekSi/gocov-xml@latest
        env:
          GOPATH: /home/runner/go

      - name: Run tests with coverage
        run: |
          echo "$GOPATH/bin" >> $GITHUB_PATH
          ls "$GOPATH/bin"
          go test -coverprofile=coverage.out ./...
          gocov convert coverage.out | gocov-xml > coverage.xml
        env:
          GOPATH: /home/runner/go

      - name: Generate code coverage report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          badge: true
          fail_below_min: false
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: "60 80"

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md
  golangci:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Extract Go version
        id: version
        run: echo GO_VERSION=$(awk '$1 == "go" {print $2}' go.mod) >> $GITHUB_OUTPUT

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.version.outputs.GO_VERSION }}
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
